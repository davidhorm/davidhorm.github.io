{
    "componentChunkName": "component---node-modules-gatsby-theme-networked-thought-src-templates-thought-tsx",
    "path": "/my-list-of-ideas-for-personal-projects",
    "result": {"data":{"thought":{"title":"My List of Ideas for Personal Projects","slug":"my-list-of-ideas-for-personal-projects","aliases":[],"content":"Tags: [About Me](/about-me)\r\n\r\n## Sorta Actively Working on (but not live yet)\r\n\r\n- https://github.com/davidhorm/cookbook - Display and scale ingredient amounts directly in recipe. (not live yet)\r\n\r\n## Took A Couple Steps\r\n\r\n- An app to compare two boardgames by looking at BGG ratings from only people that have rated both games.\r\n  - Was thinking about using GitHub Actions to scrape user ratings. https://github.com/davidhorm/bgg-scrape-ratings-action\r\n- An app to help generate an ad for a GeekList auction on [BGG](https://www.boardgamegeek.com/).\r\n  - https://github.com/davidhorm/bgg-auction-ad\r\n- How to do [Living Documentation](/living-documentation) with tools like Jest, Storybook, and Cypress.\r\n  - https://github.com/davidhorm/exploring-best-practices\r\n\r\n## Shower Thoughts\r\n\r\n- What if User Story Mapping was organized Storybook to help with [Living Documentation](/living-documentation)? Maybe use PlantUML? https://github.com/plantuml/plantuml/issues/423","id":"8096df8c-71a6-5938-8d78-303807b139ed","mtime":"2021-11-14T07:28:34.972Z","mtimeFmt":"14, November 2021","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Tags: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/about-me\"\n  }, \"About Me\")), mdx(\"h2\", null, \"Sorta Actively Working on (but not live yet)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/davidhorm/cookbook\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"https://github.com/davidhorm/cookbook\"), \" - Display and scale ingredient amounts directly in recipe. (not live yet)\")), mdx(\"h2\", null, \"Took A Couple Steps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An app to compare two boardgames by looking at BGG ratings from only people that have rated both games.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Was thinking about using GitHub Actions to scrape user ratings. \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/davidhorm/bgg-scrape-ratings-action\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"https://github.com/davidhorm/bgg-scrape-ratings-action\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An app to help generate an ad for a GeekList auction on \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.boardgamegeek.com/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"BGG\"), \".\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/davidhorm/bgg-auction-ad\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"https://github.com/davidhorm/bgg-auction-ad\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to do \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/living-documentation\"\n  }, \"Living Documentation\"), \" with tools like Jest, Storybook, and Cypress.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/davidhorm/exploring-best-practices\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"https://github.com/davidhorm/exploring-best-practices\"))))), mdx(\"h2\", null, \"Shower Thoughts\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What if User Story Mapping was organized Storybook to help with \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/living-documentation\"\n  }, \"Living Documentation\"), \"? Maybe use PlantUML? \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/plantuml/plantuml/issues/423\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"https://github.com/plantuml/plantuml/issues/423\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},"outboundReferences":[{"slug":"about-me","thought":{"id":"86e1a442-08c1-55ed-a8ae-f1fd3ce825b5","title":"About Me","slug":"about-me","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Here\\u2019s some stuff about me.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Here's some stuff about me."}},"previewMarkdown":"Tags: [About Me](/about-me)\n\n## Sorta Actively Working on (but not live yet)\n\n-   https://github.com/davidhorm/cookbook - Display and scale ingredient amounts directly in recipe. (not live yet)\n\n## Took A Couple Steps\n\n-   An app to compare two boardgames by looking at BGG ratings from only people that have rated both games.\n    -   Was thinking about using GitHub Actions to scrape user ratings. https://github.com/davidhorm/bgg-scrape-ratings-action\n-   An app to help generate an ad for a GeekList auction on [BGG](https://www.boardgamegeek.com/).\n    -   https://github.com/davidhorm/bgg-auction-ad\n-   How to do [Living Documentation](/living-documentation) with tools like Jest, Storybook, and Cypress.\n    -   https://github.com/davidhorm/exploring-best-practices\n\n## Shower Thoughts\n\n-   What if User Story Mapping was organized Storybook to help with [Living Documentation](/living-documentation)? Maybe use PlantUML? https://github.com/plantuml/plantuml/issues/423\n","previewHtml":"<p>Tags: <a href=\"/about-me\">About Me</a></p>\n<h2>Sorta Actively Working on (but not live yet)</h2>\n<ul>\n<li><a href=\"https://github.com/davidhorm/cookbook\">https://github.com/davidhorm/cookbook</a> - Display and scale ingredient amounts directly in recipe. (not live yet)</li>\n</ul>\n<h2>Took A Couple Steps</h2>\n<ul>\n<li>An app to compare two boardgames by looking at BGG ratings from only people that have rated both games.\n<ul>\n<li>Was thinking about using GitHub Actions to scrape user ratings. <a href=\"https://github.com/davidhorm/bgg-scrape-ratings-action\">https://github.com/davidhorm/bgg-scrape-ratings-action</a></li>\n</ul>\n</li>\n<li>An app to help generate an ad for a GeekList auction on <a href=\"https://www.boardgamegeek.com/\">BGG</a>.\n<ul>\n<li><a href=\"https://github.com/davidhorm/bgg-auction-ad\">https://github.com/davidhorm/bgg-auction-ad</a></li>\n</ul>\n</li>\n<li>How to do <a href=\"/living-documentation\">Living Documentation</a> with tools like Jest, Storybook, and Cypress.\n<ul>\n<li><a href=\"https://github.com/davidhorm/exploring-best-practices\">https://github.com/davidhorm/exploring-best-practices</a></li>\n</ul>\n</li>\n</ul>\n<h2>Shower Thoughts</h2>\n<ul>\n<li>What if User Story Mapping was organized Storybook to help with <a href=\"/living-documentation\">Living Documentation</a>? Maybe use PlantUML? <a href=\"https://github.com/plantuml/plantuml/issues/423\">https://github.com/plantuml/plantuml/issues/423</a></li>\n</ul>"},{"slug":"living-documentation","thought":{"id":"37d06b1f-46b3-5ccc-a2af-674a63d1ab37","title":"Living Documentation","slug":"living-documentation","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"TODO - add more details here\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"TODO - add more details here"}},"previewMarkdown":"-   An app to compare two boardgames by looking at BGG ratings from only people that have rated both games.\n    -   Was thinking about using GitHub Actions to scrape user ratings. https://github.com/davidhorm/bgg-scrape-ratings-action\n-   An app to help generate an ad for a GeekList auction on [BGG](https://www.boardgamegeek.com/).\n    -   https://github.com/davidhorm/bgg-auction-ad\n-   How to do [Living Documentation](/living-documentation) with tools like Jest, Storybook, and Cypress.\n    -   https://github.com/davidhorm/exploring-best-practices","previewHtml":"<ul>\n<li>An app to compare two boardgames by looking at BGG ratings from only people that have rated both games.\n<ul>\n<li>Was thinking about using GitHub Actions to scrape user ratings. <a href=\"https://github.com/davidhorm/bgg-scrape-ratings-action\">https://github.com/davidhorm/bgg-scrape-ratings-action</a></li>\n</ul>\n</li>\n<li>An app to help generate an ad for a GeekList auction on <a href=\"https://www.boardgamegeek.com/\">BGG</a>.\n<ul>\n<li><a href=\"https://github.com/davidhorm/bgg-auction-ad\">https://github.com/davidhorm/bgg-auction-ad</a></li>\n</ul>\n</li>\n<li>How to do <a href=\"/living-documentation\">Living Documentation</a> with tools like Jest, Storybook, and Cypress.\n<ul>\n<li><a href=\"https://github.com/davidhorm/exploring-best-practices\">https://github.com/davidhorm/exploring-best-practices</a></li>\n</ul>\n</li>\n</ul>"},{"slug":"living-documentation","thought":{"id":"37d06b1f-46b3-5ccc-a2af-674a63d1ab37","title":"Living Documentation","slug":"living-documentation","childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"TODO - add more details here\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"TODO - add more details here"}},"previewMarkdown":"-   What if User Story Mapping was organized Storybook to help with [Living Documentation](/living-documentation)? Maybe use PlantUML? https://github.com/plantuml/plantuml/issues/423","previewHtml":"<ul>\n<li>What if User Story Mapping was organized Storybook to help with <a href=\"/living-documentation\">Living Documentation</a>? Maybe use PlantUML? <a href=\"https://github.com/plantuml/plantuml/issues/423\">https://github.com/plantuml/plantuml/issues/423</a></li>\n</ul>"}],"inboundReferences":[]}},"pageContext":{"id":"8096df8c-71a6-5938-8d78-303807b139ed","title":"My List of Ideas for Personal Projects","slug":"my-list-of-ideas-for-personal-projects","absolutePath":"C:\\git\\davidhorm.github.io\\content/My List of Ideas for Personal Projects.mdx"}},
    "staticQueryHashes": ["1120226560","2140534681","2177859934","2744905544","4224293195"]}